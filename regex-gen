#!/usr/bin/python3

venv_file='./.venv/bin/activate_this.py'
with open(venv_file) as f:
    run = '\n'.join(f.readlines())
    exec(run, dict(__file__=venv_file))

from lark import Lark, Transformer

regex_grammar = r"""
?start  : re

?re    : simple_re | union
union    : re "|" simple_re
?simple_re  : basic_re | concat
concat    : simple_re basic_re
basic_re  : elementary_re count_specifier ?

!count_specifier : "*" | "+" | "?" | match_count
match_count  : "{" ( number "," ) ? number "}"

elementary_re  : group | set | any | char
?group    : "(" re ")"
number  : DIGIT +
any     : "."
char    : non_meta | "\\" meta

!non_meta  : "a".."z" | "A".."Z" | DIGIT | "_"
!meta    : "{" | "}" | "[" | "]" | "(" | ")" | "|" | "$" | "." | "+" | "*" | "?"

?set      : pset | nset
pset    : "[" set_item + "]"
nset    : "[^" set_item + "]"
?set_item  : range | char
range    : char "-" char

%import common.DIGIT
%import common.WS

%ignore WS
"""

def debug(*args):
  #print(*args)
  pass

import itertools

def str_range(start, end):
  for letter in range(ord(start), ord(end)+1):
    yield chr(letter)


def all_char():
  return itertools.chain( str_range('A', 'Z'), str_range('a', 'z'), str_range('0', '9'))


def remove_chars(ranges):
  start = list(all_char())
  given = list(ranges)
  for letter in start:
    if letter not in given:
      yield letter

def match_range(range_start=1, range_end=1):

  def range_again(gen):

    return RangeIterator( range_start, range_end, gen )

  return range_again


class ResetableIterator():

  def __init__(self, other_iterable):
    # other_iterable is either a list, or a ResetableIterator
    self.i = other_iterable

    self.use_list = False

    if type(self.i) == list:
      self.use_list = True
      self.idx = 0

  def __current__(self):
    if self.use_list:
      if len(self.i) > self.idx:
        return self.i[self.idx]
      else:
        raise StopIteration()
    else:
      return self.i.__current__()
    

  def __next__(self):
    if self.use_list:
      item = self.__current__()
      self.idx += 1
      return item
    else:
      return self.i.__next__()

  def count(self):
    if self.use_list:
      return len(self.i)
    else:
      return self.i.count()

  def random(self, rand):
    if self.use_list:
      index = rand.choice( self.i )
    else:
      return self.i.random( rand )

  def index(self, index):
    if index < 0:
      raise Exception()
    if self.use_list:
      debug("list", index, self.i[index])
      return self.i[index]
    else:
      return self.i.index(index)

  def reset(self):
    if self.use_list:
      self.idx = 0
    else:
      self.i.reset()

  def __iter__(self):
    return self


class IteratorProduct():

  def __init__(self, iters):
    self.i = iters
    self.items = None
    self.done = False

  def __current__(self):
    if self.done:
      raise StopIteration()

    return "".join(self.items)

  def __next__(self):

    if self.done:
      raise StopIteration()

    if not self.items:

      self.items = []

      for i in self.i:
        self.items.append( i.__next__() )
    else:
      # update in place, from last to first
      # only go to the previous item once it's rolled over
      idx = len(self.items) - 1
      while idx >= 0:
        try:
          item = self.i[idx].__next__()
          self.items[idx] = item
          # if it works, we don't roll over
          break
        except StopIteration:
          # have to bump the next one
          # after resetting this one
          self.i[idx].reset()
          item = self.i[idx].__next__()
          self.items[idx] = item
        idx -= 1

      if idx < 0:
        self.done = True
        self.items = None # resource usage

    return self.__current__()

  def __iter__(self):
    return self

  def count(self):
    count = 1

    for item in self.i:
      count *= item.count()

    return count

  def random(self, rand):
    index = rand.randrange(self.count())
    return self.index(index)

  def index(self, index):
    if index < 0:
      raise Exception()
    index_items = []

    for item in self.i:
      new_item = item.index( index % item.count() )
      debug("product", index, new_item)
      index_items.append( new_item )
      index //= item.count()

    return "".join( index_items )

  def reset(self):
    for i in self.i:
      i.reset()
    self.items = None
    self.done = False


class RangeIterator():

  def __init__(self, start, end, i):
    self.start = start
    self.end = end
    self.i = i
    self.gen = RangeIterator.__gen(self)
    self.item = None


  @staticmethod
  def __gen(self):
    for i in range(self.start, self.end+1):
      for item in itertools.product( self.i, repeat=i ):
        yield "".join(item)
      self.i.reset()

  def reset(self):
    self.gen = RangeIterator.__gen(self)    

  def count(self):
    count = 0
    for i in range(self.start, self.end+1):
      count += self.i.count() ** i
    return count

  def random(self, rand):
    index = rand.randrange( self.count() )
    return self.index( index )

  def index(self, index):
    if index < 0:
      raise Exception()

    count = self.i.count()

    for i in range(self.start, self.end+1):
      debug("range", index, count ** i)
      if index < count ** i:
        items = []
        for c in range(i):
          new_item = self.i.index( index % count )
          debug("range2",index, new_item)
          items.append( new_item )
          index //= count
        return "".join( items )
      else:
        index -= count ** i

  def __current__(self):
    return self.item

  def __next__(self):
    self.item = self.gen.__next__()
    return self.item

  def __iter__(self):
    return self


class IteratorUnion():

  def __init__(self, iters):
    self.i = iters
    self.idx = 0

  def __iter__(self):
    return self

  def __current__(self):
    return self.i[self.idx].__current__()

  def __next__(self):
    if self.idx >= len(self.i):
      raise StopIteration()
    try:
      return self.i[self.idx].__next__()
    except StopIteration:
      self.idx += 1
      return self.__next__()

  def count(self):
    count = 0
    for i in self.i:
      count += i.count()
    return count

  def random(self, rand):
    index = rand.randrange( self.count() )
    return self.index(index)

  def index(self, index):
    if index < 0:
      raise Exception()
    for i in self.i:
      debug("union",index)
      if index < i.count():
        debug("union", index, i.index(index))
        return i.index( index )
      index -= i.count()

  def reset(self):
    for itr in self.i:
      itr.reset()
    self.idx = 0


class RegExprParser(Transformer):

  #__default__ = lambda self, exp : exp[0]

  def __init__(self, star_plus_count=4):
    # number of times to expand a '+' or a '*'
    self.count_expand = star_plus_count

  def union(self, exp):
    debug("union", exp)
    return IteratorUnion(exp)

  def basic_re(self, exp):
    debug("basic_re", exp)
    if len(exp) == 1:
      return exp[0]
    else:
      return exp[1]( exp[0] )

  def count_specifier(self, exp):
    debug("count_specifier", exp)
    exp = exp[0]
    if exp == '*':
      return match_range(0, self.count_expand)
    elif exp == '+':
      return match_range(1, self.count_expand)
    elif exp == '?':
      return match_range(0, 1)
    else:
      # was a match_count
      return exp

  def number(self, exp):
    # Doesn't handle not base 10 numbers
    s = ''.join(exp)
    return int(s)

  def match_count(self, exp):
    debug("match_count", exp)
    count = int(exp[0])
    if len(exp) == 1:
      return match_range( count, count )
    else:
      return match_range( count, int(exp[1]) )

  def concat(self, exp):
    debug("concat", exp)
    return IteratorProduct(iters=exp)

  def elementary_re(self, exp):
    debug("elementary_re", exp)
    exp = exp[0]
    if isinstance(exp, str):
      return ResetableIterator([exp])
    elif type(exp) is not ResetableIterator:
      return ResetableIterator(exp)
    return exp

  def meta(self, exp):
    debug("meta", exp)
    return exp[0]

  def non_meta(self, exp):
    debug("non_meta", exp)
    return exp[0]

  def char(self, exp):
    debug("char", exp)
    # Convert to string
    return str(exp[0])

  def pset(self, exp):
    debug("pset", exp)
    debug("pset", [str(e) for e in exp])
    return ResetableIterator(list(itertools.chain( *exp )))

  def nset(self, exp):
    debug("nset", exp)
    return remove_chars( self.pset( exp ) )

  def range(self, exp):
    debug("range", exp)
    start, stop = exp
    return str_range(start, stop)


def parse(expr, star_plus_count = 4):
  p = RegExprParser(star_plus_count=star_plus_count)
  l = Lark(regex_grammar, parser='lalr', transformer=p)
  return l.parse(expr)


import argparse

def arg_parser():

  parser = argparse.ArgumentParser(description='A tool to list every string that matches a regex')

  parser.add_argument('regex'
      , default=["a(b|c)[de]{2,3}[g-j]"]
      , help='regex to list matching strings' )

  parser.add_argument('-c', '--expand-count', type=int, default=4
      , help='number of times to expand a * or + before stopping')

  parser.add_argument('-r', '--random', action='store_true'
      , help="randomly select one of the matching regex's")

  parser.add_argument('-C', '--count', action='store_true'
      , help="writes out then number of generated regex's")
  return parser

import random

if __name__ == "__main__":

  parser = arg_parser()

  args = parser.parse_args()

  iter = parse( args.regex, args.expand_count )

  if args.random:

    r = random.randrange(iter.count())

    #for r in range(iter.count()):
    #print( r, "/", iter.count() )
    print( iter.index(r) )
  elif args.count:
    print( iter.count() )
  else:
    for item in iter:
      print(item)


